"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var nativescript_ui_calendar_1 = require("nativescript-ui-calendar");
var color_1 = require("tns-core-modules/color");
var CalendarEventsService = /** @class */ (function () {
    function CalendarEventsService() {
    }
    CalendarEventsService.prototype.getCalendarEvents = function (notesList) {
        var now = new Date();
        var startDate, endDate, event;
        var colors = [new color_1.Color(200, 188, 26, 214), new color_1.Color(220, 255, 109, 130), new color_1.Color(255, 55, 45, 255), new color_1.Color(199, 17, 227, 10), new color_1.Color(255, 255, 54, 3)];
        var events = new Array();
        for (var i = 0; i < notesList.length; i++) {
            if (notesList[i].hasDateChecked) {
                startDate = new Date(notesList[i].date);
                endDate = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate() + 1);
                event = new nativescript_ui_calendar_1.CalendarEvent(notesList[i].title, startDate, endDate, false, colors[i * 10 % (colors.length - 1)]);
                events.push(event);
            }
        }
        return events;
    };
    CalendarEventsService = __decorate([
        core_1.Injectable()
    ], CalendarEventsService);
    return CalendarEventsService;
}());
exports.CalendarEventsService = CalendarEventsService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItZXZlbnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNhbGVuZGFyLWV2ZW50LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBMkM7QUFDM0MscUVBQXdEO0FBQ3hELGdEQUErQztBQUkvQztJQUFBO0lBa0JBLENBQUM7SUFqQkMsaURBQWlCLEdBQWpCLFVBQWtCLFNBQWtCO1FBQ2xDLElBQUksR0FBRyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDckIsSUFBSSxTQUFlLEVBQ2pCLE9BQWEsRUFDYixLQUFvQixDQUFDO1FBQ3ZCLElBQUksTUFBTSxHQUFpQixDQUFDLElBQUksYUFBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLElBQUksYUFBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLElBQUksYUFBSyxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLElBQUksYUFBSyxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksYUFBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0ssSUFBSSxNQUFNLEdBQXlCLElBQUksS0FBSyxFQUFpQixDQUFDO1FBQzlELEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO2dCQUNoQyxTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN4QyxPQUFPLEdBQUcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxFQUFFLFNBQVMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxTQUFTLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQzNGLEtBQUssR0FBRyxJQUFJLHdDQUFhLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMvRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3JCLENBQUM7UUFDSCxDQUFDO1FBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBakJVLHFCQUFxQjtRQURqQyxpQkFBVSxFQUFFO09BQ0EscUJBQXFCLENBa0JqQztJQUFELDRCQUFDO0NBQUEsQUFsQkQsSUFrQkM7QUFsQlksc0RBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2FsZW5kYXJFdmVudCB9IGZyb20gJ25hdGl2ZXNjcmlwdC11aS1jYWxlbmRhcidcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAndG5zLWNvcmUtbW9kdWxlcy9jb2xvcic7XG5pbXBvcnQgeyBOb3Rlc1NlcnZpY2UgfSBmcm9tICd+L25vdGVzL3NlcnZpY2VzL25vdGVzLnNlcnZpY2UnO1xuaW1wb3J0IHsgTm90ZXMgfSBmcm9tICd+L25vdGVzL21vZGVscy9ub3Rlcyc7XG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXJFdmVudHNTZXJ2aWNlIHtcbiAgZ2V0Q2FsZW5kYXJFdmVudHMobm90ZXNMaXN0OiBOb3Rlc1tdKTogQXJyYXk8Q2FsZW5kYXJFdmVudD4ge1xuICAgIGxldCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIGxldCBzdGFydERhdGU6IERhdGUsXG4gICAgICBlbmREYXRlOiBEYXRlLFxuICAgICAgZXZlbnQ6IENhbGVuZGFyRXZlbnQ7XG4gICAgbGV0IGNvbG9yczogQXJyYXk8Q29sb3I+ID0gW25ldyBDb2xvcigyMDAsIDE4OCwgMjYsIDIxNCksIG5ldyBDb2xvcigyMjAsIDI1NSwgMTA5LCAxMzApLCBuZXcgQ29sb3IoMjU1LCA1NSwgNDUsIDI1NSksIG5ldyBDb2xvcigxOTksIDE3LCAyMjcsIDEwKSwgbmV3IENvbG9yKDI1NSwgMjU1LCA1NCwgMyldO1xuICAgIGxldCBldmVudHM6IEFycmF5PENhbGVuZGFyRXZlbnQ+ID0gbmV3IEFycmF5PENhbGVuZGFyRXZlbnQ+KCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub3Rlc0xpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChub3Rlc0xpc3RbaV0uaGFzRGF0ZUNoZWNrZWQpIHtcbiAgICAgICAgc3RhcnREYXRlID0gbmV3IERhdGUobm90ZXNMaXN0W2ldLmRhdGUpO1xuICAgICAgICBlbmREYXRlID0gbmV3IERhdGUoc3RhcnREYXRlLmdldEZ1bGxZZWFyKCksIHN0YXJ0RGF0ZS5nZXRNb250aCgpLCBzdGFydERhdGUuZ2V0RGF0ZSgpICsgMSk7XG4gICAgICAgIGV2ZW50ID0gbmV3IENhbGVuZGFyRXZlbnQobm90ZXNMaXN0W2ldLnRpdGxlLCBzdGFydERhdGUsIGVuZERhdGUsIGZhbHNlLCBjb2xvcnNbaSAqIDEwICUgKGNvbG9ycy5sZW5ndGggLSAxKV0pO1xuICAgICAgICBldmVudHMucHVzaChldmVudCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBldmVudHM7XG4gIH1cbn0iXX0=